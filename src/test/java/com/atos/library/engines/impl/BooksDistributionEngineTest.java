package com.atos.library.engines.impl;import com.atos.library.engines.DistributionEngine;import com.atos.library.model.Book;import org.apache.commons.lang3.StringUtils;import org.junit.jupiter.api.Test;import java.util.ArrayList;import java.util.List;import static org.junit.jupiter.api.Assertions.*;class BooksDistributionEngineTest {    private static final String CURRENT_READER = "currentReader";    private static final int ID_INVALID = 1;    private static final int ID_VALID = 0;    private static final String READER = "reader";    private final Book book = new Book("title", "author", 1234);    private final List<Book> books = new ArrayList<>();    private DistributionEngine booksDistributionEngine = new BooksDistributionEngine();    @Test    void addBookTest() {        // When        booksDistributionEngine.addBook(books, book);        //Then        assertTrue(books.contains(book));    }    @Test    void lendBookInvalidIdTest() {        // Given        books.add(book);        // When        booksDistributionEngine.lendBook(books, ID_INVALID, READER);        //Then        assertTrue(book.isAvailable());        assertEquals(StringUtils.EMPTY, book.getReader());    }    @Test    void lendBookUnavailableTest() {        // Given        book.setAvailable(false);        book.setReader(CURRENT_READER);        books.add(book);        // When        booksDistributionEngine.lendBook(books, ID_VALID, READER);        //Then        assertEquals(CURRENT_READER, book.getReader());    }    @Test    void lendBookTest() {        // Given        books.add(book);        // When        booksDistributionEngine.lendBook(books, ID_VALID, READER);        //Then        assertFalse(book.isAvailable());        assertEquals(READER, book.getReader());    }    @Test    void removeBookInvalidIdTest() {        // Given        books.add(book);        // When        booksDistributionEngine.removeBook(books, ID_INVALID);        //Then        assertTrue(books.contains(book));    }    @Test    void removeBookUnavailableTest() {        // Given        book.setAvailable(false);        books.add(book);        // When        booksDistributionEngine.removeBook(books, ID_VALID);        //Then        assertTrue(books.contains(book));    }    @Test    void removeBookTest() {        // Given        books.add(book);        // When        booksDistributionEngine.removeBook(books, ID_VALID);        //Then        assertFalse(books.contains(book));    }}