package com.atos.library.engines.impl;import com.atos.library.engines.SearchEngine;import com.atos.library.model.Book;import com.google.common.collect.ImmutableList;import org.junit.jupiter.api.Test;import java.util.List;import java.util.Optional;import static org.junit.jupiter.api.Assertions.*;class BooksSearchEngineTest {    private static final String AUTHOR = "sue";    private static final String AUTHOR_FULL = "Sue Townsend";    private static final String AUTHOR_INVALID = "invalidAuthor";    private static final String TITLE_ONE_SEARCH_ARG = "ADRIAN mole";    private static final String TITLE_INVALID = "invalidTitle";    private static final String TITLE_TWO_SEARCH_ARGS = "CaPuCcI";    private static final String TITLE_TWO_SEARCH_ARGS_FULL = "Adrian Mole: The Capuccino Years";    private static final String TITLE_ONE_SEARCH_ARGS_FULL = "The Secret Diary of Adrian Mole, Aged 13 3/4";    private static final int YEAR = 2003;    private static final int YEAR_INVALID = 12345;    private final List<Book> books = ImmutableList.of(new Book("Kathy Sierra", "Head First Java", YEAR),            new Book("Randall Munroe", "What If", 2014),            new Book(AUTHOR_FULL, TITLE_ONE_SEARCH_ARGS_FULL, 1982),            new Book("Gareth M. James", "An Introduction to Statistical Learning", 2013),            new Book(AUTHOR_FULL, TITLE_TWO_SEARCH_ARGS_FULL, YEAR),            new Book(AUTHOR_FULL, "The Growing Pains of Adrian Mole", 1984));    private SearchEngine searchEngine = new BooksSearchEngine();    @Test    void findBooksByAuthorTest() {        // When        Optional<List<Book>> actual = searchEngine.findBooksByAuthor(books, AUTHOR);        // Then        assertTrue(actual.isPresent());        assertEquals(3, actual.get().size());        assertEquals(AUTHOR_FULL, actual.get().get(0).getAuthor());    }    @Test    void findBooksByInvalidAuthorTest() {        // When        Optional<List<Book>> actual = searchEngine.findBooksByAuthor(books, AUTHOR_INVALID);        // Then        assertFalse(actual.isPresent());    }    @Test    void findBooksByAuthorAndTitleTest() {        // When        Optional<List<Book>> actual = searchEngine.findBooksByAuthorAndTitle(books, AUTHOR, TITLE_TWO_SEARCH_ARGS);        // Then        assertTrue(actual.isPresent());        assertEquals(1, actual.get().size());        assertEquals(AUTHOR_FULL, actual.get().get(0).getAuthor());        assertEquals(TITLE_TWO_SEARCH_ARGS_FULL, actual.get().get(0).getTitle());    }    @Test    void findBooksByInvalidAuthorAndInvalidTitleTest() {        // When        Optional<List<Book>> actual = searchEngine.findBooksByAuthorAndTitle(books, AUTHOR_INVALID, TITLE_INVALID);        // Then        assertFalse(actual.isPresent());    }    @Test    void findBooksByAuthorAndYearTest() {        // When        Optional<List<Book>> actual = searchEngine.findBooksByAuthorAndYear(books, AUTHOR, YEAR);        // Then        assertTrue(actual.isPresent());        assertEquals(1, actual.get().size());        assertEquals(AUTHOR_FULL, actual.get().get(0).getAuthor());        assertEquals(YEAR, actual.get().get(0).getYear());    }    @Test    void findBooksByInvalidAuthorAndInvalidYearTest() {        // When        Optional<List<Book>> actual = searchEngine.findBooksByAuthorAndYear(books, AUTHOR_INVALID, YEAR_INVALID);        // Then        assertFalse(actual.isPresent());    }    @Test    void findBooksByTitleTest() {        // When        Optional<List<Book>> actual = searchEngine.findBooksByTitle(books, TITLE_ONE_SEARCH_ARG);        // Then        assertTrue(actual.isPresent());        assertEquals(3, actual.get().size());        assertEquals(TITLE_ONE_SEARCH_ARGS_FULL, actual.get().get(0).getTitle());    }    @Test    void findBooksByInvalidTitleTest() {        // When        Optional<List<Book>> actual = searchEngine.findBooksByTitle(books, TITLE_INVALID);        // Then        assertFalse(actual.isPresent());    }    @Test    void findBooksByYearTest() {        // When        Optional<List<Book>> actual = searchEngine.findBooksByYear(books, YEAR);        // Then        assertTrue(actual.isPresent());        assertEquals(2, actual.get().size());        assertEquals(YEAR, actual.get().get(0).getYear());    }    @Test    void findBooksByInvalidYearTest() {        // When        Optional<List<Book>> actual = searchEngine.findBooksByYear(books, YEAR_INVALID);        // Then        assertFalse(actual.isPresent());    }    @Test    void findBooksByYearAndTitleTest() {        // When        Optional<List<Book>> actual = searchEngine.findBooksByYearAndTitle(books, YEAR, TITLE_TWO_SEARCH_ARGS);        // Then        assertTrue(actual.isPresent());        assertEquals(1, actual.get().size());        assertEquals(TITLE_TWO_SEARCH_ARGS_FULL, actual.get().get(0).getTitle());        assertEquals(YEAR, actual.get().get(0).getYear());    }    @Test    void findBooksByInvalidYearAndInvalidTitleTest() {        // When        Optional<List<Book>> actual = searchEngine.findBooksByYearAndTitle(books, YEAR_INVALID, TITLE_INVALID);        // Then        assertFalse(actual.isPresent());    }}