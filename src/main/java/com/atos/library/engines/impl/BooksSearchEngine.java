package com.atos.library.engines.impl;import com.atos.library.engines.SearchEngine;import com.atos.library.model.Book;import java.util.List;import java.util.Optional;import java.util.stream.Collectors;public class BooksSearchEngine implements SearchEngine {    @Override    public Optional<List<Book>> findBooksByAuthor(List<Book> books, String author) {        List<Book> filteredBooks = books.stream()                .filter(book -> book.getAuthor().toLowerCase().contains(author.toLowerCase()))                .collect(Collectors.toList());        return getOptionalEmptyOrOptionalOf(filteredBooks);    }    @Override    public Optional<List<Book>> findBooksByAuthorAndTitle(List<Book> books, String author, String title) {        return findBooksWithAdditionalTitleSearch(findBooksByAuthor(books, author), title);    }    @Override    public Optional<List<Book>> findBooksByAuthorAndYear(List<Book> books, String author, int year) {        return findBooksWithAdditionalYearSearch(findBooksByAuthor(books, author), year);    }    @Override    public Optional<Book> findBookById(List<Book> books, int id) {       return books.size() > id ? Optional.of(books.get(id)) : Optional.empty();    }    @Override    public Optional<List<Book>> findBooksByTitle(List<Book> books, String title) {        List<Book> filteredBooks = books.stream()                .filter(book -> book.getTitle().toLowerCase().contains(title.toLowerCase()))                .collect(Collectors.toList());        return getOptionalEmptyOrOptionalOf(filteredBooks);    }    @Override    public Optional<List<Book>> findBooksByYear(List<Book> books, int year) {        List<Book> filteredBooks = books.stream()                .filter(book -> book.getYear() == year)                .collect(Collectors.toList());        return getOptionalEmptyOrOptionalOf(filteredBooks);    }    @Override    public Optional<List<Book>> findBooksByYearAndTitle(List<Book> books, int year, String title) {        return findBooksWithAdditionalTitleSearch(findBooksByYear(books, year), title);    }    private Optional<List<Book>> findBooksWithAdditionalTitleSearch(Optional<List<Book>> books, String title) {        if (books.isPresent()) {            List<Book> filteredBooks = books.get().stream()                    .filter(book -> book.getTitle().toLowerCase().contains(title.toLowerCase()))                    .collect(Collectors.toList());            return getOptionalEmptyOrOptionalOf(filteredBooks);        }            return Optional.empty();    }    private Optional<List<Book>> findBooksWithAdditionalYearSearch(Optional<List<Book>> books, int year) {        if (books.isPresent()) {            List<Book> filteredBooks = books.get().stream()                    .filter(book -> book.getYear() == year)                    .collect(Collectors.toList());            return getOptionalEmptyOrOptionalOf(filteredBooks);        }        return Optional.empty();    }    private Optional<List<Book>> getOptionalEmptyOrOptionalOf(List<Book> books) {        return books.isEmpty() ? Optional.empty() : Optional.of(books);    }}